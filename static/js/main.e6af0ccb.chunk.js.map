{"version":3,"sources":["Components/Components/FormInput.js","Actions/index.js","Constants/Action.js","Components/Components/ModalE.js","Components/Components/FormEdit.js","Components/Components/ModalEdit.js","Components/Components/Row.js","Components/Components/data.js","Components/Components/Table.js","App.js","serviceWorker.js","Reducers/tasks.js","Reducers/toggle_form.js","Reducers/txt_search.js","Reducers/sort.js","Reducers/test.js","Reducers/index.js","index.js"],"names":["FormInput","props","onSubmit","event","preventDefault","obj","id","randomstring","generate","name","state","txtName","status","selected","addTask","closeForm","handleChange","bind","target","value","this","setState","className","type","aria-label","onClick","aria-hidden","htmlFor","aria-describedby","onChange","length","Component","connect","dispatch","task","deleteRow","React","useState","smShow","setSmShow","Modal","size","show","onHide","aria-labelledby","Header","Body","Button","FormEdit","element","updateRow","console","log","btnCancle","ModalEdit","setShow","handleClose","changeStateRow","onEdit","Row","handleonClick","toggle_satus","display","bol","style","backgroundColor","nameEdit","statusEdit","index","data","tasks","toggleForm","toggle_form","toggleStatus","Table","handleOnClick","sortName","handleSubmit","text","txtSearch","searchName","handleGanerate","rgData","txtSearchFilter","data1","value_sort","sort","a","b","filter","e","toUpperCase","indexOf","list1","map","itemUpdate","key","placeholder","toggleFormFunc","data-toggle","aria-haspopup","aria-expanded","href","txt_search","test","App","list","push","forEach","localStorage","setItem","JSON","stringify","update","isUpdate","fontSize","submit","enableForm","Boolean","window","location","hostname","match","parse","getItem","initialState","myReducer","action","temp","splice","E","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6af0ccb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport randomstring from 'randomstring'\r\nimport {connect} from 'react-redux'\r\nimport {addTask} from '../../Actions/index'\r\nimport { closeForm } from '../../Actions/index';\r\nexport class FormInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            txtName: \"\",\r\n            selected: true\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n   \r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        var value = target.value;\r\n        if (name === \"selected\") {\r\n            value = value === \"true\" ? true : false\r\n        }\r\n        \r\n        this.setState({\r\n            [name]: value\r\n        });\r\n        //console.log(this.state.txtName)\r\n        // console.log(typeof(event.target.value));\r\n         \r\n    }\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        var obj = {\r\n            id: randomstring.generate(),\r\n            name: this.state.txtName,\r\n            status: this.state.selected\r\n        }\r\n        //this.props.submit(obj)\r\n        this.props.addTask(obj)\r\n        this.props.closeForm();\r\n        \r\n    }\r\n\r\n    render() {\r\n       // console.log(this.state.txtName + \"---\" + this.state.selected)\r\n\r\n        return (\r\n            <div className=\"col-sm-4\">\r\n                <div className=\"card border-primary \">\r\n\r\n                    <div className=\"bg-primary p-2\">THÊM CÔNG VIỆC\r\n                        <div className=\"float-right\">\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.props.closeForm}>\r\n                                <span className=\"hover\" aria-hidden=\"true\">×</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <form onSubmit={this.onSubmit} >\r\n                            <div className=\"form-group\">\r\n\r\n                                <label htmlFor=\"exampleInputEmail1 \">Tên</label>\r\n                                <input  value={this.state.txtName} name=\"txtName\" className=\"form-control\" aria-describedby=\"emailHelp\" onChange={this.handleChange} />\r\n                                {\r\n                                    this.state.txtName.length === 0 ? <small id=\"emailHelp\" className=\"form-text text-muted text-danger \">\r\n                                        <p className=\"text-danger\">Vui lòng nhập tên &nbsp; <i className=\"fa fa-pencil\" aria-hidden=\"true\" />\r\n                                        </p>\r\n                                    </small> : \"\"\r\n                                }\r\n\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>\r\n                                    Trạng thái\r\n                                </label>\r\n                                <div >\r\n                                    <select name=\"selected\" className=\"form-control\" value={this.state.selected} onChange={this.handleChange}>\r\n                                        <option value={false}>Ẩn</option>\r\n                                        <option value={true}>Kích hoạt</option>\r\n\r\n\r\n                                    </select>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-around\">\r\n                                <button type=\"submit\" className=\"btn btn-success\"><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Add</button>\r\n                                <button className=\"btn btn-danger \" onClick={this.props.closeForm}>Cancel</button>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props)=>{\r\n    return {\r\n        addTask : (task)=>{\r\n            dispatch(addTask(task))\r\n        },\r\n        closeForm : ()=>{\r\n            dispatch(closeForm())\r\n        }\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(FormInput);\r\n","\r\nimport * as Types from '../Constants/Action'\r\nexport const listAll =()=>{\r\n    return {\r\n        type: Types.LIST_ALL\r\n    }\r\n}\r\nexport const addTask =(task)=>{\r\n    return {\r\n        type: Types.ADD_TASK,\r\n        task : task\r\n    }\r\n}\r\nexport const closeForm=()=>{\r\n    return {\r\n        type: Types.CLOSE_FORM,\r\n    }\r\n}\r\nexport const openForm =()=>{\r\n    return {\r\n        type: Types.OPEN_FORM,\r\n        \r\n    }\r\n}\r\nexport const toggleForm =(task)=>{\r\n    return {\r\n        type: Types.TOGGLE_FORM,\r\n    }\r\n}\r\nexport const toggleStatus = (element)=>{\r\n    return {\r\n        type: Types.TOGGLE_STATUS,\r\n        element: element\r\n    }\r\n}\r\nexport const rgData = (data)=>{\r\n    return {\r\n        type: Types.RESET_GENERATE_DATA,\r\n        data: data\r\n    }\r\n}\r\nexport const deleteRow = (id)=>{\r\n    return {\r\n        type: Types.DELETE,\r\n        id : id\r\n    }\r\n}\r\nexport const updateRow =(element)=>{\r\n    return {\r\n        type : Types.UPDATE,\r\n        element :element\r\n    }\r\n}\r\n\r\nexport const searchName=(txtSearch)=>{\r\n    return {\r\n        type : Types.SEARCH,\r\n        txtSearch : txtSearch\r\n    }\r\n}\r\nexport const sortName=(value)=>{\r\n    return {\r\n        type :Types.SORT,\r\n        value:value\r\n    }\r\n}\r\n","export const LIST_ALL = \"LIST_ALL\"\r\nexport const ADD_TASK = \"ADD_TASK\"\r\nexport const TOGGLE_FORM = \"TOGGLE_FORM\"\r\nexport const CLOSE_FORM =\"CLOSE_FORM\"\r\nexport const OPEN_FORM =\"OPEN_FORM\"\r\nexport const TOGGLE_STATUS =\"TOGGLE_STATUS\"\r\nexport const RESET_GENERATE_DATA = \"RESET_GENERATE_DATA\"\r\nexport const DELETE =\"DELETE\"\r\nexport const UPDATE =\"UPDATE\"\r\nexport const FILTER =\"FILTER\"\r\nexport const SEARCH =\"SEARCH\"\r\nexport const SORT =\"SORT\"","\r\nimport {Modal, Button} from \"react-bootstrap\";\r\nimport React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {deleteRow} from '../../Actions/index'\r\nfunction Example(props) {\r\n    const [smShow, setSmShow] = React.useState(false);\r\n    const {id} = props;\r\n    var onClick =()=>{\r\n      props.deleteRow(id)\r\n        setSmShow(false)\r\n    }\r\n    //console.log(\"modal----delete\")\r\n\r\n    return (\r\n      <>\r\n        \r\n        <button onClick={() => setSmShow(true)} type=\"button\" className=\"btn btn-outline-danger \">Delete</button>\r\n        <Modal\r\n          size=\"sm\"\r\n          show={smShow}\r\n          onHide={() => setSmShow(false)}\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n       \r\n        >\r\n          <Modal.Header  >\r\n              <div className=\"col-sm-12 d-flex justify-content-center\">\r\n              <h1 className=\"text-danger\">Delete <i className=\"fa fa-trash\" aria-hidden=\"true\"></i></h1>\r\n              </div>\r\n           \r\n          </Modal.Header>\r\n          <Modal.Body className=\"d-flex justify-content-center\">\r\n              <Button onClick={()=>{ onClick()}} className=\"col-sm-4\">YES</Button>\r\n              &nbsp;\r\n              <Button onClick={() => setSmShow(false)}  className=\"col-sm-4\">CENCEL</Button>\r\n          </Modal.Body>\r\n        </Modal>\r\n        \r\n      </>\r\n    );\r\n  }\r\n  const mapDispatchToProps = (dispatch, props)=>{\r\n    return {\r\n        deleteRow : (id)=>{\r\n          dispatch(deleteRow(id))\r\n        }\r\n    }\r\n  }\r\n  export default connect(null,mapDispatchToProps)(Example);","import React, { Component } from 'react';\r\nimport {connect} from'react-redux'\r\nimport {updateRow} from '../../Actions/index'\r\nexport class FormEdit extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            txtName:this.props.element.name,\r\n            status: this.props.element.status\r\n        }\r\n    }\r\n    onSubmit =(event)=>{\r\n        event.preventDefault();\r\n        var obj ={\r\n            id : this.props.element.id,\r\n            name : this.state.txtName,\r\n            status: this.state.status\r\n        }\r\n        // this.props.changeStateRow(this.state.txtName,this.state.status)\r\n        // this.props.onEdit(obj)\r\n        this.props.updateRow(obj)\r\n        console.log(\"---------btn add\")\r\n    }\r\n    handleChange=(event)=>{\r\n        var name = event.target.name;\r\n        var value= event.target.value;\r\n        if(name === \"status\"){\r\n            value = value === \"true\" ? true : false;\r\n        }\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n        console.log(value);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"---------Form edit\")\r\n        return (\r\n            <div>\r\n                 <form onSubmit={this.onSubmit} >\r\n                            <div className=\"form-group\">\r\n\r\n                                <label >Tên</label>\r\n                                <input  value={this.state.txtName} name=\"txtName\" className=\"form-control\" onChange={this.handleChange} />\r\n                               \r\n\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>\r\n                                    Trạng thái\r\n                                </label>\r\n                                <div >\r\n                                    <select name=\"status\" className=\"form-control\" value={this.state.status} onChange={this.handleChange}>\r\n                                        <option value={false}>Ẩn</option>\r\n                                        <option value={true}>Kích hoạt</option>\r\n\r\n\r\n                                    </select>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                            \r\n                            <div className=\"d-flex justify-content-around\">\r\n                                <button onClick={this.props.btnCancle} type=\"submit\" className=\"btn btn-success col-sm-4\">YES</button>\r\n                                <div onClick={this.props.btnCancle} className=\"btn btn-danger col-sm-4\" >Cancel</div>\r\n                            </div>\r\n                            \r\n                        </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps =(dispatch, props)=>{\r\n    return {\r\n        updateRow : (element)=>{\r\n            dispatch(updateRow(element))\r\n        }\r\n    }\r\n}\r\nexport default (connect(null, mapDispatchToProps))(FormEdit);\r\n","\r\nimport {Modal} from 'react-bootstrap'\r\nimport React from 'react'\r\nimport FormEdit from './FormEdit';\r\n\r\nfunction ModalEdit(props) {\r\n    const [show, setShow] = React.useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    // console.log(\"---------MOdalEit\")\r\n    return (\r\n      <>\r\n        <button  onClick={handleShow} type=\"button\" className=\"mr-1 btn btn-outline-warning \">Edit</button>\r\n\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header >\r\n          <div className=\"col-sm-12 d-flex justify-content-center\">\r\n              <h3 className=\"text-danger\"><i className=\"fa fa-pencil-square\" aria-hidden=\"true\"></i> EDIT </h3>\r\n              </div>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n              <FormEdit changeStateRow={props.changeStateRow} onEdit={props.onEdit} btnCancle={ handleClose} element={props.element}></FormEdit>\r\n            </Modal.Body>\r\n          {/* <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={handleClose}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer> */}\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n\r\n  export default ModalEdit;","import React, { Component } from 'react';\r\nimport Example from './ModalE';\r\nimport ModalEdit from './ModalEdit';\r\nimport {toggleStatus} from '../../Actions/index'\r\nimport { connect } from 'react-redux';\r\nexport class Row extends Component {\r\n \r\n    handleonClick=()=>{\r\n        console.log(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\r\n        this.props.toggle_satus(this.props.element)\r\n    }\r\n    display = (bol) => {\r\n        if (bol === true) return <button onClick={this.handleonClick} className=\"btn btn-success rounded p-1\" style={{ backgroundColor: \"green\" }}>Kích hoạt</button>\r\n        else return <button onClick={this.handleonClick}  className=\"btn btn-danger rounded \" style={{ backgroundColor: \"orange\" }} >Ẩn</button>\r\n       \r\n    }\r\n    changeStateRow=(nameEdit, statusEdit)=>{\r\n        this.setState ({\r\n            name : nameEdit,\r\n            status: statusEdit\r\n        })\r\n    }\r\n    render() {\r\n        // // console.log(\"row\")\r\n        // console.log(\"*************************************************\")\r\n        // console.log(this.props.itemUpdate)\r\n        // console.log(\"*************************************************\")\r\n        var { element} = this.props;\r\n\r\n        console.log(element)\r\n        return (\r\n            \r\n            <tr>\r\n                <td className=\"text-center\">{this.props.index}</td>\r\n                <td className=\"text-center\">{element.name}</td>\r\n                <td className=\"text-center\">{this.display(this.props.element.status)}</td>\r\n                <td className=\"text-center\">\r\n                    <ModalEdit changeStateRow={this.changeStateRow} onEdit={this.props.onEdit} element={element}></ModalEdit>\r\n\r\n\r\n\r\n\r\n                    <Example id={element.id}> </Example></td>\r\n            </tr>\r\n\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    return {\r\n        data : state.tasks,\r\n        toggleForm: state.toggle_form // chu y ten\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props)=>{\r\n    return {\r\n        toggle_satus : (element)=>{\r\n            dispatch(toggleStatus(element))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Row);\r\n","import  randomstring from 'randomstring';\r\n\r\nexport const tasks =[\r\n    {\r\n      id: randomstring.generate(),\r\n      name:\"Dang Xuan Thang\",\r\n      status: true,\r\n    },\r\n    {\r\n      id: randomstring.generate(),\r\n      name:\"Dang Xuan Thang\",\r\n      status: true,\r\n    },\r\n    {\r\n      id: randomstring.generate(),\r\n      name:\"Dang Xuan Thang\",\r\n      status: true,\r\n    },\r\n    {\r\n      id: randomstring.generate(),\r\n      name:\"Dang Xuan Thang\",\r\n      status: true,\r\n    },\r\n    {\r\n      id: randomstring.generate(),\r\n      name:\"Dang Xuan Thang\",\r\n      status: false,\r\n    },\r\n    {\r\n      id: randomstring.generate(),\r\n      name:\"Dang Xuan Thang\",\r\n      status: true,\r\n    }\r\n  ]","import React, { Component } from 'react';\r\nimport Row from './Row';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { tasks } from './data'\r\nimport { toggleForm, rgData, searchName , sortName} from '../../Actions/index';\r\nexport class Table extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        console.log(\"contructor: table\");\r\n        super(props);\r\n        this.state = {\r\n\r\n            txtSearch: \"\",\r\n            txtSearchFilter: \"\",\r\n            selected: \"all\",\r\n\r\n\r\n        }\r\n\r\n    }\r\n    // resetAdd =()=>{\r\n    //     this.setState({\r\n    //         list : this.props.data\r\n    //     })\r\n    // }\r\n    // componentWillMount() {\r\n\r\n    //     console.log(\"willmount table\")\r\n    // }\r\n\r\n    // shouldComponentUpdate(nextprops, nextstate) {\r\n\r\n    //     // var text = nextstate.txtSearchFilter;\r\n    //     // text = text.toUpperCase()\r\n    //     // var a = this.props.data;\r\n    //     // a = a.filter((e) => {\r\n    //     //     return (e.name.toUpperCase().indexOf(text) !== -1)\r\n    //     // })\r\n    //     //LIST = a;\r\n\r\n    //     console.log(\"shouldComponentUpdate\" + nextstate.txtSearchFilter)\r\n\r\n    //     return true\r\n    // }\r\n    handleOnClick = (value) => {\r\n       this.props.sortName(value)\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        var name = event.target.name;\r\n        var value = event.target.value;\r\n       \r\n        console.log(value)\r\n\r\n        this.setState({\r\n            [name]: value,\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        var text = this.state.txtSearch;\r\n        this.props.searchName(text)\r\n\r\n    }\r\n\r\n    handleGanerate = () => {\r\n        this.props.rgData(tasks)\r\n    }\r\n    render() {\r\n       \r\n        var data1 = this.props.data\r\n        \r\n        \r\n        if(this.props.value_sort === 1){\r\n           \r\n            data1 = data1.sort((a, b)=>{\r\n                if(a.name > b.name){ return 1}\r\n                else return -1\r\n            })\r\n        }else if(this.props.value_sort === -1)\r\n        {\r\n            data1 = data1.sort((a, b)=>{\r\n                if(a.name < b.name){ return 1}\r\n                else return -1\r\n            })\r\n        }\r\n        if (this.state.txtSearchFilter.length !== 0) {\r\n            data1 = data1.filter((e) => {\r\n                return (e.name.toUpperCase().indexOf(this.state.txtSearchFilter.toUpperCase()) !== -1)\r\n            })\r\n\r\n            console.log(data1)\r\n        }\r\n\r\n        if (this.props.txtSearch.length > 0) {\r\n            data1 = data1.filter((e) => {\r\n                return (e.name.toUpperCase().indexOf(this.props.txtSearch.toUpperCase()) !== -1)\r\n            })\r\n        }\r\n        if (this.state.selected === \"true\") {\r\n\r\n            let temp = true;\r\n            data1 = data1.filter((e) => {\r\n\r\n                return (e.status === temp)\r\n            }\r\n            )\r\n        } else if (this.state.selected === \"false\") {\r\n            let temp = false;\r\n            data1 = data1.filter((e) =>\r\n                (\r\n                    e.status === temp\r\n                ))\r\n        }\r\n        // if(this.state.list.length > 0){\r\n        //     data1 = this.state.list\r\n        // }\r\n        // console.log(\"---------table\")\r\n        // console.log(this.state.list.length); console.log(data1);\r\n        // console.log(\"---------table\")\r\n\r\n        var list1 = data1.map((element, index) => {\r\n            // console.log(element.name)\r\n            return <Row\r\n\r\n                itemUpdate={this.props.itemUpdate}\r\n\r\n\r\n                index={index + 1} key={element.id}\r\n                element={element}></Row>\r\n        })\r\n\r\n        return (\r\n            <div >\r\n\r\n\r\n\r\n\r\n\r\n                <div className=\"mb-3\">\r\n                    <div className=\"d-flex\">\r\n                        <form onSubmit={this.handleSubmit} className=\"form-inline my-2 my-lg-0\">\r\n                            <input onChange={this.handleChange} name=\"txtSearch\" className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"><i className=\"fa fa-search\" aria-hidden=\"true\"></i> Search</button>\r\n                        </form>\r\n                        {/* <button className=\"ml-3 btn  my-2 my-sm-0 btn-primary\" type=\"submit\"> Sắp xếp  <i className=\"fa fa-sort\"></i></button> */}\r\n                        <button className=\"ml-3 btn  my-2 my-sm-0 btn-primary\" type=\"submit\"\r\n                            onClick={this.props.toggleFormFunc}\r\n                        ><i className=\"fa fa-plus\" ></i> Thêm công việc</button>\r\n                        &nbsp;&nbsp;\r\n                        <button type=\"button\" onClick={this.handleGanerate} className=\"btn btn-danger\">Reset and Genarate Data</button>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"\">\r\n                    <table className=\"table table-bordered col-md-12\">\r\n\r\n\r\n                        <thead >\r\n\r\n                            <tr>\r\n                                <th className=\"text-center\">STT</th>\r\n                                <th className=\"d-flex justify-content-center\">\r\n                                    <div className=\"row\">\r\n                                        <div>Tên &nbsp;</div>\r\n\r\n                                        <input onChange={this.handleChange} value={this.state.txtSearchFilter} name=\"txtSearchFilter\" className=\"rounded ml-2\" type=\"search\" placeholder=\"Lọc theo tên\" aria-label=\"Search\" />\r\n                                        {/* <button onClick={this.handleSort} className=\"ml-2 rounded btn-primary\" type=\"submit\"> Sắp xếp  <i className=\"fa fa-sort-alpha-asc\"></i>\r\n\r\n                                \r\n                                    </button> */}\r\n                                    &nbsp;\r\n                                        <div className=\"dropdown \">\r\n                                            <button className=\"btn-primary rounded dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                Sắp xếp\r\n                                            </button>\r\n                                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                                                <span  onClick={()=>{this.handleOnClick(1)}} className=\"btn dropdown-item\">Tên  <i className=\"fa fa-sort-alpha-asc\"> &nbsp;&nbsp;&nbsp; {this.props.value_sort === 1 ? <i className=\"fa fa-check\" aria-hidden=\"true\"></i> :\"\"}</i></span>\r\n                                                <span href=\"\"  onClick={()=>{this.handleOnClick(-1)}} className=\"btn dropdown-item\">Tên  <i className=\"fa fa-sort-alpha-desc\"> &nbsp;&nbsp;&nbsp; {this.props.value_sort === -1 ? <i className=\"fa fa-check\" aria-hidden=\"true\"></i> :\"\"} </i></span>\r\n                                                <span href=\"\"  onClick={()=>{this.handleOnClick(2)}} className=\"btn dropdown-item\">No sort&nbsp;&nbsp;&nbsp; {this.props.value_sort === 2 ? <i className=\"fa fa-check\" aria-hidden=\"true\"></i> :\"\"}</span>\r\n                                               \r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n\r\n                                </th>\r\n                                <th className=\"text-center\">Trạng thái &nbsp;\r\n                                <select className=\"btn-primary rounded\" name=\"selected\" value={this.state.selected} onChange={this.handleChange}>\r\n                                        <option value=\"true\">Kích hoạt</option>\r\n                                        <option value=\"false\">Ẩn</option>\r\n                                        <option value=\"all\">Tất cả</option>\r\n\r\n                                    </select>\r\n                                </th>\r\n                                <th className=\"text-center\">Hành động</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {list1}\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* <button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n        Launch vertically centered modal\r\n      </button>\r\n\r\n \r\n                <MyVerticallyCenteredModal\r\n                   show={modalShow}\r\n                   onHide={() => setModalShow(false)}\r\n                /> */}\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.tasks,\r\n        toggleForm: state.toggle_form,\r\n        txtSearch: state.txt_search,\r\n        value_sort: state.value_sort,\r\n        test : state.test // chu y ten khop state of store\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n\r\n        toggleFormFunc: () => {\r\n            dispatch(toggleForm())\r\n        },\r\n        rgData: (tasks) => {\r\n            dispatch(rgData(tasks))\r\n        },\r\n        searchName: (txtSearch) => {\r\n            dispatch(searchName(txtSearch))\r\n        },\r\n        \r\n        sortName: (value)=>{\r\n            dispatch(sortName(value))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\r\n","\n\nimport './App.css';\nimport FormInput from './Components/Components/FormInput';\nimport Table from './Components/Components/Table';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      tasks:[],\n      //enableForm : false,\n      itemUpdate : {}\n    }\n   \n  }\n \n  // UNSAFE_componentWillMount(){\n  //   if(localStorage && localStorage.getItem(\"tasks\")){\n  //     this.setState({\n  //       tasks : JSON.parse(localStorage.getItem(\"tasks\"))\n  //     })\n  //   }\n  // }\n  // closeForm =()=>{\n  //   this.setState({\n  //     enableForm: false\n  //   })\n  // }\n  // enableForm=()=>{\n\n  //   this.setState({\n  //     enableForm: true\n  //   })\n  // }\n  \n  onSubmit=(obj)=>{\n    var list = this.state.tasks;\n    list.push(obj)\n    this.setState({\n      tasks : list\n    })\n      console.log(this.state.tasks);\n    \n     \n  }\n  onEdit=(obj)=>{\n    console.log(obj)\n    var list= this.state.tasks;\n    var itemUpdate ;\n    list.forEach((e, index)=>{\n      if(e.id === obj.id){\n        list[index] = obj;\n        itemUpdate = list[index];\n      }\n    })\n    this.setState({\n      tasks : list,\n      itemUpdate : itemUpdate\n    })\n   // localStorage.setItem(\"tasks\",this.state.tasks)\n   localStorage.setItem(\"tasks\",JSON.stringify(list));\n  }\n  // deleteRow =( id )=> {\n  //   var list = this.state.tasks;\n  //   list.forEach((e, index) =>{\n  //     if (e.id === id){\n  //       list.splice(index, 1)\n  //     }\n  //   })\n  //   this.setState({\n  //     tasks: list\n  //   })\n  //   //localStorage.setItem(\"tasks\",this.state.tasks)\n  //  // localStorage.setItem(\"tasks\",JSON.stringify(this.state.tasks));\n  // }\n  componentDidMount(){\n   \n    console.log(\"--------- didmount app\")\n    console.log(this.state.tasks )\n    console.log(\"--------- didmount app\")\n  }\n  componentDidUpdate (){\n    if(this.state.isUpdate === true)\n    {\n      this.setState({\n        isUpdate :false\n      })\n    }\n  }\n  update=()=>{\n   \n  }\n  render() {\n    console.log(this.state.tasks)\n    //localStorage.setItem(\"tasks\",JSON.stringify(this.state.tasks));\n    // var {tasks } = this.state;\n    console.log(this.props.toggleForm)\n    console.log(\"render APP\")\n    return (\n      <div>\n\n\n\n\n\n        \n        <div >\n          <nav className=\"navbar navbar-light bg-light row justify-content-center\">\n            <div style={{ fontSize: 30 }} className=\"navbar-brand text-center\"> Quản lý công việc </div>\n          </nav>\n          <div className=\"container mt-3\">\n            <div className=\"row\">\n              \n                  {\n                    this.props.toggleForm === true ? <FormInput  submit={this.onSubmit}  ></FormInput> : \"\"\n                  }\n                \n              \n              <div className={this.props.toggleForm === false ? \"col-sm-12\" : \"col-sm-8\"}>\n                <Table\n                itemUpdate ={this.state.itemUpdate} \n                onEdit={this.onEdit} \n                \n                \n                \n                enableForm={this.enableForm}></Table>\n              </div>\n            </div>\n\n          </div>\n\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state)=>{\n  return {\n      toggleForm: state.toggle_form\n  }\n}\n\nexport default connect(mapStateToProps,null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport * as Types from '../Constants/Action'\r\nvar data = JSON.parse(localStorage.getItem(\"tasks\") )\r\nvar initialState = data ? data : []\r\nconst myReducer =( state = initialState, action) =>{\r\n    if(action.type === Types.LIST_ALL)\r\n    {\r\n        return state;\r\n    }\r\n    if(action.type === Types.ADD_TASK)\r\n    {\r\n        var {task} = action;\r\n        var temp = [...state];\r\n        temp.push(task)\r\n\r\n        localStorage.setItem(\"tasks\",JSON.stringify(temp));\r\n        return temp\r\n        \r\n    }\r\n    if(action.type === Types.TOGGLE_STATUS){\r\n       \r\n        console.log(action)\r\n        var {element} = action;\r\n        console.log(element)\r\n        let temp = [...state];\r\n        console.log(state)\r\n        temp.forEach((e, index) => {\r\n            if(e.id === element.id)\r\n            {\r\n                \r\n                \r\n                temp[index] = {\r\n                    id:element.id,\r\n                    name: element.name,\r\n                    status : !e.status\r\n                }\r\n            }\r\n        });\r\n        localStorage.setItem(\"tasks\",JSON.stringify(temp))\r\n        return temp;\r\n\r\n    }\r\n    if(action.type === Types.RESET_GENERATE_DATA){\r\n        \r\n        var {data} = action;\r\n        localStorage.setItem(\"tasks\", JSON.stringify(data))\r\n        return  data;\r\n    }\r\n    if(action.type === Types.DELETE)\r\n    {\r\n        var {id} = action;\r\n        let temp = [...state];\r\n        temp.forEach((e, index)=>{\r\n            if(e.id === id){\r\n                temp.splice(index, 1)\r\n            }\r\n        })\r\n        localStorage.setItem(\"tasks\", JSON.stringify(temp))\r\n        return temp;\r\n    }\r\n    if(action.type === Types.UPDATE){\r\n        let {element} = action;\r\n        let temp = [...state]\r\n        temp.forEach((E, index)=>{\r\n            if(E.id === element.id){\r\n                temp[index] = element\r\n            }\r\n        })\r\n        localStorage.setItem(\"tasks\", JSON.stringify(temp))\r\n        return temp;\r\n    }\r\n \r\n    return state;\r\n}\r\nexport default myReducer;","import * as Type from '../Constants/Action'\r\nvar initState = false;\r\nvar myReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case Type.CLOSE_FORM:\r\n            return false;\r\n        case Type.OPEN_FORM:\r\n            return true;\r\n        case Type.TOGGLE_FORM:\r\n           return !state;\r\n        default:\r\n            // console.log(\"+++++++++++++++++++++++++++++++++++++++++++\")\r\n            // console.log(state)\r\n            // console.log(\"+++++++++++++++++++++++++++++++++++++++++++\")\r\n            return state;\r\n    }\r\n    \r\n}\r\nexport default myReducer;","import * as Type from '../Constants/Action'\r\nvar initState = \"\"\r\nconst myReducer = (state = initState, action)=>{\r\n    if(action.type === Type.SEARCH )\r\n    {\r\n        var {txtSearch} = action;\r\n        return  txtSearch;\r\n    }\r\n    return state;\r\n}\r\nexport default myReducer;","import * as Types from '../Constants/Action'\r\n\r\nvar initState= 2;\r\nconst myReducer = (state = initState, action)=>{\r\n    if(action.type === Types.SORT){\r\n        var {value} = action;\r\n        return value;\r\n    }\r\n  \r\n    return state;\r\n}\r\nexport default myReducer;","var myReducer = (state = 1, action)=>{\r\n    return state;\r\n}\r\nexport default myReducer","import {combineReducers} from 'redux'\r\nimport tasks from './tasks'\r\nimport toggle_form from './toggle_form';\r\nimport  txt_search from './txt_search'\r\nimport value_sort from './sort'\r\nimport test from './test'\r\nconst myReducer = combineReducers({\r\n    tasks : tasks, \r\n    toggle_form : toggle_form,\r\n    txt_search :txt_search,\r\n    value_sort: value_sort,\r\n    test:test\r\n    \r\n\r\n})\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux'\nimport {createStore} from 'redux'\nimport myReducer from './Reducers/index'\nconst store = createStore(myReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\nconsole.log(store.getState())\nReactDOM.render(\n<Provider store ={ store}>\n<App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}